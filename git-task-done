#!/bin/bash

set -e
source "${0%[\\/]*}"/_git-common.sh
main=$(git config --get init.defaultbranch)

curtask=$1
if [ "" == "$1" ]; then
        curtask=$(git rev-parse --abbrev-ref HEAD)

        if [ $main == $curtask ]; then
		echo "Specify a task name to mark done or --continue to continue merging"
		exit 1
        fi
fi




git task-sync

remote=$(git config "branch.$main.remote")
taskfile="$(git rev-parse --git-dir)/TASK_NAME"
if [ "--continue" != "$1" ]; then
	task=$curtask
	if [[ $task == task-* ]]; then
		task=${task:5}
	fi

	stat=`git task-status $task`
	if [[ $stat != *env-* ]]; then
		if [[ $2 == --force ]]; then
			echo "Task is not in testing, marking it done anyway"
		else
			echo "Task is not in testing, run git task-test first or use --force"
			exit 1
		fi
	fi

	echo $task > $taskfile

	echo Marking "'"task-$task"'" done

	git checkout $main
	if ! git merge --no-ff --no-edit -m "Mark task-$task done" $remote/task-$task
	then
		echo " - Fix the merge conflicts"
		echo " - run 'git add -A' or 'git add <file>'"
		echo " - run 'git commit'"
		echo " - run 'git task-done --continue'"
		exit 1
	fi
else
	task=`cat $taskfile`
fi

if [[ $2 != --force ]]; then
	env=`expr "$stat" : 'testing on env-\(.*\)'`
	tasks=`git branch -r --list $remote/task\* | cut -f2- -d/ | cut -f2- -d-`
	for curtask in $tasks; do
		curstat=`git task-status $curtask`
		if [ "merged in env-$env" == "$curstat" ]; then
			git push $remote :task-$curtask
			git branch -d task-$curtask || true
		fi
	done
fi

git push $remote $main :task-$task
git branch -d task-$task || true

rm $taskfile
